import numpy as np
import matplotlib.pyplot as plt


class A:

    def __init__(self, number):
        self.length = number

    def a_function(self, integer):
        return 1.2*np.sin(np.exp(integer/10)) 

    def xArray(self):
        xArr=[]

        for i in range(self.length):
            xArr.append(self.a_function(i))

        xArr=np.array(xArr)
        return xArr

    def findMax(self, arr): 
        maxValue=0
        maxIndex=0
        for i in range(len(arr)):
            if arr[i] > maxValue:
                maxValue=arr[i]
                maxIndex=i
        return maxIndex, maxValue



    def vertLine(self, x_val):
        """
        This function should give the x and y coordinates of a vertical line, 
        placed at the x_val. There should be 18 equally spaced skinny dashes.

        """
        # Initialize arrays to be returned
        x_range=np.zeros(18)
        y_array=[]

        # Set arrays accordingly. 

        for i in range(18):
            x_range[i]=x_val
            y_array.append(np.min(self.xArray())+i*(np.max(self.xArray()-np.min(self.xArray()))/18))
        
        # Convert to numpy array, or else scatter plot won't work

        y_array=np.array(y_array)
        

        return x_range, y_array


    def lnit(self, arr):
        """
        Helper function to return the same array, where 
        every entry is now its own natural log
        """
        return_me=np.zeros(len(arr))

        for i in range(len(arr)):
            if arr[i]!=0:
                return_me[i]=np.log(arr[i])
        return return_me


    def actualData(self, collisionality, start_cutoff_early):

        """
        
        This is the actual data created by the simulations and scripts. 
        Nothing more, nothing less!

        """
        if collisionality=="n":
            z_array = [3,5, 6, 7,8, 10, 26, 42, 54, 74]
        else: 
            z_array=[5,6,7,10,26,42,54,74]

        if start_cutoff_early==True:
            lambda_c = [0.029692012, 0.02795868, 0.02836725, 0.03081594, 0.03087827622,  0.0296357 , 0.02439496,
            0.01841981, 0.0145118 , 0.0115249 ]
            lambda_nc = [ 0.00756316,  0.00509029,  0.00516141,  0.00615863,  0.00833552, 0.00371849,  0.00400455, -0.00260706]
        else: 
            lambda_c = [0.02402027, 0.02698016, 0.02897151, 0.02721918, 0.02442441,
        0.02010712, 0.01663404, 0.01307704]
            lambda_nc = [0.00416017, 0.00405292, 0.00641412, 0.00838865, 0.02024922,
        0.00331627, 0.0026525 , 0.00206684]

        return z_array, lambda_c, lambda_nc

    def density_charge_data(self):
        """
        This is the density data for different initial charges of tungsten
        """
        return [[7.78481277e-07, 1.01823624e-06, 1.20420471e-06, 1.40876147e-06,
        1.59214829e-06, 1.68402815e-06, 1.87927476e-06, 2.07237694e-06,
        2.15472590e-06, 2.29975519e-06, 2.44819103e-06, 2.43162546e-06,
        2.63401242e-06, 2.70344843e-06, 2.62957605e-06, 2.72346194e-06,
        2.80958207e-06, 2.98931624e-06, 3.08803916e-06, 3.15210514e-06,
        3.33487539e-06, 3.64541882e-06, 3.96930629e-06, 4.20508113e-06,
        4.76160258e-06, 5.21439104e-06, 5.90137255e-06, 6.80642172e-06,
        7.68058847e-06, 8.44574109e-06, 9.24027874e-06, 1.07245003e-05,
        1.20037186e-05, 1.25889387e-05, 1.39428284e-05, 1.47768363e-05,
        1.52040377e-05, 1.56455239e-05, 1.60827557e-05, 1.67084271e-05,
        1.73073498e-05, 1.73555030e-05, 1.82160268e-05, 1.92218604e-05,
        2.01949713e-05, 2.17974686e-05, 2.32718048e-05, 2.55290204e-05,
        2.86368910e-05, 3.23227906e-05, 3.56651422e-05, 4.00707372e-05,
        4.43243935e-05, 4.83300967e-05, 5.14329821e-05, 5.41485427e-05,
        5.62134357e-05, 5.83456065e-05, 6.21708122e-05, 6.51185582e-05,
        6.97542602e-05, 7.55825726e-05, 8.26044546e-05, 9.22343169e-05,
        1.01939512e-04, 1.13057835e-04, 1.22089894e-04, 1.31187146e-04,
        1.40783350e-04, 1.49223308e-04, 1.60614353e-04, 1.71108960e-04,
        1.85462216e-04, 2.00197839e-04, 2.19138455e-04, 2.41765742e-04,
        2.64459424e-04, 2.90422235e-04, 3.14860669e-04, 3.36613409e-04,
        3.55920969e-04, 3.82353578e-04, 4.20748833e-04, 4.72127360e-04,
        5.52872045e-04, 6.67917563e-04, 8.19214952e-04, 1.01545446e-03,
        1.25860915e-03, 1.59162678e-03, 2.39789022e-03, 4.29059825e-03,
        2.67817498e-03, 1.79924741e-03, 1.19584419e-03, 6.16494349e-04],[1.11384911e-06, 1.55086375e-06, 1.98535152e-06, 2.36981375e-06,
        2.80375763e-06, 3.19602081e-06, 3.57558643e-06, 3.93158836e-06,
        4.16535544e-06, 4.47411353e-06, 4.68090940e-06, 4.72901610e-06,
        5.02499162e-06, 5.17726790e-06, 5.59375072e-06, 5.70913017e-06,
        5.80181552e-06, 5.94787155e-06, 6.11886027e-06, 6.32165290e-06,
        6.66834433e-06, 7.00147661e-06, 7.37807490e-06, 8.06156128e-06,
        8.69090060e-06, 9.66313003e-06, 1.08848880e-05, 1.20598453e-05,
        1.34227436e-05, 1.51914049e-05, 1.70370594e-05, 1.87594647e-05,
        2.08057367e-05, 2.28441492e-05, 2.46072446e-05, 2.64194619e-05,
        2.74667648e-05, 2.85041318e-05, 2.88735010e-05, 2.90219304e-05,
        2.98395982e-05, 3.08442861e-05, 3.11612666e-05, 3.23297794e-05,
        3.35984978e-05, 3.53182800e-05, 3.76954734e-05, 4.05478917e-05,
        4.42138453e-05, 4.85438791e-05, 5.27973276e-05, 5.77206890e-05,
        6.21783482e-05, 6.67701947e-05, 7.12025235e-05, 7.45382839e-05,
        7.61506689e-05, 7.82195654e-05, 8.22564075e-05, 8.49201757e-05,
        9.01823264e-05, 9.74413581e-05, 1.06189387e-04, 1.15952499e-04,
        1.25437638e-04, 1.34005553e-04, 1.43737530e-04, 1.51616091e-04,
        1.61560464e-04, 1.71665246e-04, 1.81084338e-04, 1.94084511e-04,
        2.10671793e-04, 2.24612073e-04, 2.39049984e-04, 2.54385163e-04,
        2.72813728e-04, 2.91184626e-04, 3.11369574e-04, 3.30781862e-04,
        3.51078737e-04, 3.75869919e-04, 4.07386087e-04, 4.53413091e-04,
        5.21784200e-04, 6.14415585e-04, 7.35853150e-04, 8.82427140e-04,
        1.05504550e-03, 1.29554577e-03, 1.91204887e-03, 3.50625338e-03,
        2.06895882e-03, 1.47229379e-03, 1.05148783e-03, 5.75350063e-04], [2.28428271e-06, 3.64814861e-06, 4.88344329e-06, 5.91747306e-06,
        6.73420223e-06, 7.58503231e-06, 8.29883643e-06, 8.76488632e-06,
        9.25050008e-06, 9.81150012e-06, 1.03446201e-05, 1.06161665e-05,
        1.10814825e-05, 1.12115371e-05, 1.13946832e-05, 1.13762142e-05,
        1.15657147e-05, 1.16260285e-05, 1.16613903e-05, 1.19940228e-05,
        1.25162480e-05, 1.30853564e-05, 1.37519724e-05, 1.44137859e-05,
        1.57510479e-05, 1.69105888e-05, 1.88108312e-05, 2.07312915e-05,
        2.28024351e-05, 2.50869387e-05, 2.80969927e-05, 3.12767545e-05,
        3.39748333e-05, 3.72853442e-05, 3.99011661e-05, 4.17606009e-05,
        4.33334965e-05, 4.42577329e-05, 4.46148199e-05, 4.45072622e-05,
        4.42170444e-05, 4.39710610e-05, 4.47545870e-05, 4.55759315e-05,
        4.64815597e-05, 4.74439693e-05, 4.95904136e-05, 5.22841958e-05,
        5.55236821e-05, 5.98594096e-05, 6.57468802e-05, 7.06907599e-05,
        7.48108126e-05, 7.96373316e-05, 8.20483665e-05, 8.30172266e-05,
        8.45353214e-05, 8.79685934e-05, 9.28277250e-05, 9.77971691e-05,
        1.03289707e-04, 1.10828761e-04, 1.17850477e-04, 1.26041962e-04,
        1.33104188e-04, 1.39695803e-04, 1.44129238e-04, 1.50396204e-04,
        1.56476969e-04, 1.62857989e-04, 1.70024875e-04, 1.80647231e-04,
        1.95996691e-04, 2.11983279e-04, 2.29447802e-04, 2.45707600e-04,
        2.58445378e-04, 2.71814155e-04, 2.89945245e-04, 3.06820366e-04,
        3.21653640e-04, 3.46612009e-04, 3.77425794e-04, 4.22052436e-04,
        4.75688167e-04, 5.47311990e-04, 6.37168409e-04, 7.41932063e-04,
        8.85766765e-04, 1.08984193e-03, 1.57575932e-03, 2.98754153e-03,
        1.67483863e-03, 1.20642998e-03, 9.08111151e-04, 5.12076565e-04],[3.22231552e-06, 5.20666826e-06, 6.93401844e-06, 8.51067921e-06,
        9.70918306e-06, 1.07111916e-05, 1.17507757e-05, 1.25125482e-05,
        1.30703293e-05, 1.36746933e-05, 1.42762941e-05, 1.45680540e-05,
        1.47658793e-05, 1.48516983e-05, 1.51201816e-05, 1.52080650e-05,
        1.50646460e-05, 1.53821668e-05, 1.54166467e-05, 1.53912762e-05,
        1.57302008e-05, 1.63619638e-05, 1.68945937e-05, 1.82219192e-05,
        1.92371261e-05, 2.08763245e-05, 2.26697542e-05, 2.53698891e-05,
        2.81000794e-05, 3.07505438e-05, 3.38101279e-05, 3.64989618e-05,
        3.98540032e-05, 4.23629464e-05, 4.47617002e-05, 4.62314591e-05,
        4.74474116e-05, 4.70017254e-05, 4.66827257e-05, 4.60669891e-05,
        4.54225643e-05, 4.50259319e-05, 4.51719905e-05, 4.59893871e-05,
        4.79197317e-05, 4.97814002e-05, 5.17100508e-05, 5.46203438e-05,
        5.83320272e-05, 6.25461131e-05, 6.77561301e-05, 7.26952298e-05,
        7.57471835e-05, 7.76747296e-05, 7.94372977e-05, 7.97319682e-05,
        7.98058039e-05, 8.09397387e-05, 8.52749874e-05, 9.00184413e-05,
        9.58807889e-05, 1.03025803e-04, 1.10487337e-04, 1.16526419e-04,
        1.21827674e-04, 1.26769732e-04, 1.33245870e-04, 1.40133854e-04,
        1.46172724e-04, 1.49991280e-04, 1.53048283e-04, 1.58581666e-04,
        1.69882535e-04, 1.86941900e-04, 2.05830289e-04, 2.22648284e-04,
        2.34023930e-04, 2.44246203e-04, 2.57400813e-04, 2.72441674e-04,
        2.87471267e-04, 3.08795228e-04, 3.38895472e-04, 3.77845919e-04,
        4.25769012e-04, 4.83508041e-04, 5.52086088e-04, 6.31052656e-04,
        7.45227287e-04, 9.18653682e-04, 1.35659893e-03, 2.62780043e-03,
        1.44498203e-03, 1.05749492e-03, 8.09698441e-04, 4.65768321e-04], [4.11845854e-06, 6.47432434e-06, 8.48460646e-06, 1.02855363e-05,
        1.20163977e-05, 1.32174791e-05, 1.40404296e-05, 1.49722773e-05,
        1.58069937e-05, 1.63053199e-05, 1.68570575e-05, 1.70065819e-05,
        1.73605721e-05, 1.74183266e-05, 1.70165019e-05, 1.68837286e-05,
        1.65409804e-05, 1.65347821e-05, 1.64607895e-05, 1.65968586e-05,
        1.71251790e-05, 1.78711298e-05, 1.90738759e-05, 2.05541037e-05,
        2.20863539e-05, 2.38430015e-05, 2.63306163e-05, 2.90764980e-05,
        3.26591631e-05, 3.55663864e-05, 3.86521502e-05, 4.22138846e-05,
        4.55096111e-05, 4.79020371e-05, 4.93155139e-05, 5.02687842e-05,
        4.95031872e-05, 4.89333760e-05, 4.72930160e-05, 4.60959909e-05,
        4.51517657e-05, 4.48337172e-05, 4.37747526e-05, 4.44859109e-05,
        4.65174160e-05, 4.89265325e-05, 5.21819289e-05, 5.52567341e-05,
        5.96494867e-05, 6.46687018e-05, 7.05017444e-05, 7.48859732e-05,
        7.81710575e-05, 7.93050645e-05, 7.90998670e-05, 7.74124582e-05,
        7.64136078e-05, 7.72901456e-05, 7.96422387e-05, 8.44647910e-05,
        9.18066606e-05, 9.86363725e-05, 1.05760187e-04, 1.10742312e-04,
        1.15198430e-04, 1.19411108e-04, 1.25827944e-04, 1.31686086e-04,
        1.37449407e-04, 1.41021448e-04, 1.41868062e-04, 1.45543765e-04,
        1.56750758e-04, 1.71060147e-04, 1.89982803e-04, 2.05369954e-04,
        2.17174553e-04, 2.25684219e-04, 2.38005041e-04, 2.54207478e-04,
        2.69211304e-04, 2.89819261e-04, 3.16450391e-04, 3.55466931e-04,
        3.96948083e-04, 4.44638463e-04, 4.97637587e-04, 5.61154302e-04,
        6.59470646e-04, 8.19121856e-04, 1.20744527e-03, 2.36374592e-03,
        1.28851605e-03, 9.43653259e-04, 7.37455007e-04, 4.38144393e-04],[4.02818191e-06, 6.99135309e-06, 9.19000372e-06, 1.09582073e-05,
        1.21835599e-05, 1.32241952e-05, 1.47104629e-05, 1.54033689e-05,
        1.62510295e-05, 1.72829250e-05, 1.75532557e-05, 1.77432713e-05,
        1.74557487e-05, 1.70184420e-05, 1.66748341e-05, 1.64909166e-05,
        1.66541202e-05, 1.67665363e-05, 1.70575098e-05, 1.74159452e-05,
        1.80971174e-05, 1.89862397e-05, 1.99056963e-05, 2.09483499e-05,
        2.26098960e-05, 2.46052152e-05, 2.68598500e-05, 2.97920189e-05,
        3.26864065e-05, 3.63604061e-05, 3.97558408e-05, 4.30626364e-05,
        4.60456370e-05, 4.85199658e-05, 4.89684704e-05, 4.95401654e-05,
        4.92705305e-05, 4.78406486e-05, 4.60370593e-05, 4.44000938e-05,
        4.37837592e-05, 4.27992113e-05, 4.24680762e-05, 4.28862293e-05,
        4.41462852e-05, 4.74991721e-05, 5.09656360e-05, 5.48021507e-05,
        5.88248063e-05, 6.38254758e-05, 6.82596105e-05, 7.18213736e-05,
        7.47711058e-05, 7.70098365e-05, 7.67341419e-05, 7.56853776e-05,
        7.44513486e-05, 7.45805131e-05, 7.73454203e-05, 8.11532622e-05,
        8.62506399e-05, 9.18965287e-05, 9.85215599e-05, 1.03125838e-04,
        1.07136441e-04, 1.11973017e-04, 1.17086440e-04, 1.23494370e-04,
        1.31025753e-04, 1.34802093e-04, 1.36916097e-04, 1.39618113e-04,
        1.48908534e-04, 1.63808604e-04, 1.79669438e-04, 1.91959049e-04,
        2.02821650e-04, 2.13360611e-04, 2.27345069e-04, 2.40061612e-04,
        2.52872423e-04, 2.72681411e-04, 2.98836432e-04, 3.28243145e-04,
        3.66533177e-04, 4.07352447e-04, 4.51741973e-04, 5.12079224e-04,
        5.96087578e-04, 7.47395295e-04, 1.10262482e-03, 2.15549385e-03,
        1.16435282e-03, 8.58267598e-04, 6.76201780e-04, 4.11002987e-04],
 [3.72399023e-06, 6.71797702e-06, 9.14580655e-06, 1.09345150e-05,
        1.23152411e-05, 1.31587732e-05, 1.36236190e-05, 1.43390302e-05,
        1.50162755e-05, 1.58085285e-05, 1.63488507e-05, 1.65141848e-05,
        1.65876770e-05, 1.61499140e-05, 1.60199863e-05, 1.60442471e-05,
        1.59842985e-05, 1.59865007e-05, 1.61816517e-05, 1.66144414e-05,
        1.74945893e-05, 1.83745937e-05, 1.94883476e-05, 2.10332265e-05,
        2.25457778e-05, 2.44673700e-05, 2.69251979e-05, 2.93070644e-05,
        3.19763188e-05, 3.54027879e-05, 3.85606923e-05, 4.21032943e-05,
        4.48687459e-05, 4.69203614e-05, 4.83950938e-05, 4.80865304e-05,
        4.69994178e-05, 4.55018732e-05, 4.28995004e-05, 4.13977510e-05,
        4.00614395e-05, 3.95045835e-05, 3.92569431e-05, 3.98647930e-05,
        4.14513352e-05, 4.42201170e-05, 4.78524522e-05, 5.21285680e-05,
        5.71470120e-05, 6.13979197e-05, 6.54305714e-05, 6.85503370e-05,
        7.09444253e-05, 7.17210706e-05, 7.06166672e-05, 7.02795087e-05,
        6.90151963e-05, 6.94747353e-05, 7.18105280e-05, 7.57719009e-05,
        7.99754782e-05, 8.54443760e-05, 9.17280852e-05, 9.62745936e-05,
        9.97839937e-05, 1.03315739e-04, 1.08571120e-04, 1.13484383e-04,
        1.18648528e-04, 1.21093848e-04, 1.21965829e-04, 1.25766126e-04,
        1.34869897e-04, 1.48772048e-04, 1.64783387e-04, 1.76315256e-04,
        1.88975085e-04, 2.00635647e-04, 2.12502844e-04, 2.26498351e-04,
        2.41895287e-04, 2.59327762e-04, 2.82077893e-04, 3.08934330e-04,
        3.39026949e-04, 3.72764393e-04, 4.14528984e-04, 4.73082019e-04,
        5.54894201e-04, 6.88515494e-04, 1.00915974e-03, 2.01151940e-03,
        1.07505310e-03, 7.92749763e-04, 6.38182358e-04, 3.88521102e-04]]

    def rsep(self):
        """
        Function which returns the R-R_sep values of radius
        """

        rsep_ = np.zeros(96)
        r_raw = np.linspace(2.3002872, 2.3548665, 96)

        for i in range(len(rsep_)):
            rsep_[i] = r_raw[i]-2.259
        return rsep_




    def plotIt(self, zoom=False, cutoff_early=True):
        """
        Here's the plot, the money plot! Data was directly copied from the splinePlot2
        script in netCDFRepo. 

        Inputs: 
            - None
        Outputs: 
            - Plot of the data along with the actual arrays used to plot the data. 
                Gives data as z_array, collisional lambda values, and then 
                non-collisional lambda values

        """
        # Get data from actual simulations
        
        nc_arr = np.asarray(self.actualData("nc",cutoff_early)[2])
        c_arr  = np.asarray(self.actualData("n", cutoff_early)[1])   
        z_arr_nc  = np.asarray(self.actualData("nc", cutoff_early)[0])
        z_arr_n = np.asarray(self.actualData("n", cutoff_early)[0])

        # Convert units of the y-axis
        
        nc_cm = nc_arr * 100.0
        c_cm  = c_arr  * 100.0

        # Change some parameters about figure size and label size, for prettiness' sake

        fig, ax = plt.subplots(figsize=(7.5, 5.0), constrained_layout=True)
        ax.tick_params(axis='both', which='major', labelsize=20)

        # Colors for the plots

        color_nc = '#9999ff'
        color_n = '#ff9966'

        # Plotting parameters for the main plot! 
        
        ax.plot(z_arr_n, c_cm,  linewidth=5.0, color='black', zorder=2)     
        ax.plot(z_arr_n, c_cm,  linewidth=3.0, color=color_n, zorder=3) 
        if cutoff_early==False:
            ax.plot(z_arr_nc, nc_cm, linewidth=5.0, color='black')
            ax.plot(z_arr_nc, nc_cm, linewidth=3.0, color=color_nc, label='Collisionless')  

        # Star labels via scatter plot

        ax.scatter(z_arr_n, c_cm,  marker='*', s=590, color=color_n,
           edgecolors='k', linewidths=1.8, zorder=10)
        
        if cutoff_early==False:
            ax.scatter(z_arr_nc, nc_cm, marker='*', s=590, color=color_nc,
               edgecolors='k', linewidths=1.8, zorder=10)
        
        # Labels / legend
        
        ax.set_xlabel('Atomic Number, Z', fontsize=19)
        ax.set_ylabel("Inward transport \n parameter"+r" ($\mathdefault{\lambda}$, cm)", fontsize=19)
        ax.legend(fontsize=19, frameon=False)

        # Clean up spines: remove right/top; slightly emphasize left/bottom ---
        
        for spine in ('right', 'top'):
            ax.spines[spine].set_visible(False)
        ax.spines['left'].set_linewidth(1.5)
        ax.spines['bottom'].set_linewidth(1.5)


        if zoom==True:
            ax.set_xlim(0,15)
            ax.set_ylim(2.7,3.2)

        plt.show()

        # Preserve your original return if other code depends on it
        return self.actualData("nc",cutoff_early)






    def plot_charge_density(self):
        """
        Function to plot the initial charge trials for R_sep vs density
        """
        # Script to rename plot and size it correctly

        fig, ax = plt.subplots(figsize=(7.5, 5.0), constrained_layout=True)
        ax.tick_params(axis='both', which='major', labelsize=20)

        # This function will plot each charge profile on the plot 

        x_ax = self.rsep()
        def y_ax(k):
            return self.density_charge_data()[k]
    
        # Rainbow Colors. They don't look great though. 
        color_list = ['red', 'orange', 'yellow', 'green', 'blue', 'purple', 'violet']
        chL=[r"W$^{+}$",r"W$^{2+}$", r"W$^{3+}$", r"W$^{4+}$",
                r"W$^{5+}$",r"W$^{6+}$", r"W$^{7+}$"] 
        for i in range(7):
            ax.plot(x_ax, y_ax(i), linewidth=5.0, color='black')
            ax.plot(x_ax, y_ax(i), linewidth=4.0,label=f"{chL[i]}")


        # Spine stuff

        for spine in ('right', 'top'):
            ax.spines[spine].set_visible(False)
        ax.spines['left'].set_linewidth(1.5)
        ax.spines['bottom'].set_linewidth(1.5)

        # Plotting time! 

        ax.legend(fontsize=19, frameon=False)
        ax.set_xlabel(r"R-R$_{\text{sep}}$ (m)", fontsize=19)
        ax.set_ylabel(r"$n_W\cdot$arb", fontsize=19)
        plt.show()



